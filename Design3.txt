		           +---------------------------+
       	          |         CIS 520           |
		           | PROJECT 3: Virtual Memory |
		           |     DESIGN DOCUMENT       |
		           +---------------------------+

---- GROUP ----

>> Fill in the names of your group members.

Calvin Bailey
Hunter Guthrie
Payton Jellison

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- ALGORITHMS ----

>> A1: In a few paragraphs, describe the existing code for locating the
>> frame, if any, that contains the data of a given page.

There is a member for all the page structs, and physical data is stored in the frame struct. There is a pointer variable for the virtual
address of te kernel in the frame struct, this pointer holds the page it owns, and the rest of the physical data. frame_alloc_and_lock()
in frame.c to allocate the frame, in this function it does the work of locating which frame in memory to use. It first checks if 
there are any available frames and if not, it must clear one to be used. 

---- SYNCHRONIZATION ----

>> A2: When two user processes both need a new frame at the same time,
>> how are races avoided?

The scan_lock function makes sure that only one process can access a particular frame by checking the lock value of the frame's
struct to see if it is being used. 

		       PAGING TO AND FROM DISK
		       =======================

---- ALGORITHMS ----

>> B1: When a frame is required but none is free, some frame must be
>> evicted.  Describe the algorithm used to choose a frame to evict.

try_frame_allooc_and_lock() in frame.c checks to see which frame has been used the least so that it can take over that one.

>> B2: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

We check that the page would not overflow the stack, then make sure the address is no greater than 32 bytes from the esp of the user.
This is because "PUSH" and "PUSHA" will only access up to 32 bytes past the users esp.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct mapping *map used in sys_unmap to unmap the mapping int supplied.

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

syscall.c has a mapping struct used to store these files. There is a memory address and file stored in the struct. When a page is
evicted for memory mapped files, it does not make changes to the file unless there have been changes while it was in the page.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

The page_allocated() function checks makes sure that if file mapping is trying to write to a page that is already taken, it can't
execute and overwrite it. 

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

We share much of the code, the pages all go through the single page_out() from page.c We do have one difference where it checks if 
it is a memory mapped file or not so that it knows whether to write anything to the disk on eviction. 


